"use client";

import { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState, useEffect, useContext } from "react";
import { Form, Formik } from "formik";
import * as Yup from "yup";
import { useRouter } from "next/router";

import Layout from "@/components/layout";
import RoomCard from "@/components/room-card";
import { AuthContext } from "@/store/context/AuthContext";
import socket from "@/config/socket/socket";
import { IRoom } from "@/types/auth-store";
import { signOut } from "@/services/auth.service";
import Input from "@/components/ui/input";

const Index: NextPage = () => {
  const Router = useRouter();
  const { state } = useContext(AuthContext);
  const [isLoading, setIsLoading] = useState(true);
  const [rooms, setRooms] = useState<IRoom[]>([]);
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [isAddRoom, setIsAddRoom] = useState(false);

  const filteredRooms = () => {
    if (searchQuery) {
      return rooms.filter((room) =>
        room.name.toLowerCase().includes(searchQuery)
      );
    } else {
      return rooms;
    }
  };

  const handleSignOut = () => signOut();

  const handleJoinRoom = (room_id: string) => {
    Router.push(`/chats/${room_id}`);
    socket.emit("join", {
      user_id: state.user?.user_id,
      room_id: room_id,
    });
  };

  useEffect(() => {
    socket.on("room", (room: IRoom) => {
      setRooms([...rooms, room]);
    });
  }, [rooms]);

  useEffect(() => {
    socket.emit("get-room-data");
    socket.on("room-data", (rooms: IRoom[]) => {
      setRooms(rooms);
      setIsLoading(false);
    });
  }, []);

  return (
    <Layout
      withTopBar
      topBarElement={
        <div className="flex items-center w-full px-6">
          <div className="flex justify-between w-full items-center">
            <div className="flex items-center  gap-5">
              <Image
                src={`https://ui-avatars.com/api/?name=${state.user?.name}&background=random`}
                alt={`showing ${state.user?.name} avatar image`}
                width={48}
                height={48}
                className="w-12 h-12 rounded-full object-cover"
              />
              <p className="text-brand-xl leading-brand-xl">
                {state.user?.name}
              </p>
            </div>
            <button
              className="p-2 rounded-md hover:bg-opacity-25 block hover:bg-brand-blue-500"
              onClick={handleSignOut}
            >
              Logout
            </button>
          </div>
        </div>
      }
    >
      <div className="flex-1 w-full px-[27px]">
        <Head>
          <title>mechat-app</title>
          <meta name="description" content="Generated by Create Next Stack." />
        </Head>

        <div className="sticky top-0 z-10 bg-white pb-1  pt-[31px]">
          <div className="relative flex items-center w-full py-[18px] bg-brand-gray-400 rounded-[10px] mb-3">
            <Image
              src="/assets/icons/magnifier.svg"
              alt="magnifier icon"
              width={24}
              height={24}
              className="ml-6"
            />
            <input
              onChange={(e) => setSearchQuery(e.target.value)}
              type="text"
              placeholder="Search Room..."
              className="bg-transparent focus:outline-none ml-5 text-xl leading-5 "
            />
          </div>
          <button
            className="font-bold text-brand-xl leading-brand-xl bg-brand-blue-500 rounded-md p-2 text-white mb-3"
            onClick={() => setIsAddRoom(true)}
          >
            + room
          </button>
        </div>

        <div className="space-y-5">
          {isLoading ? (
            <div>Loading</div>
          ) : filteredRooms().length === 0 ? (
            <div className="text-center text-2xl">{searchQuery} not found</div>
          ) : (
            filteredRooms().map((room, index) => (
              <RoomCard
                key={index}
                room={room}
                handleJoin={() => handleJoinRoom(room._id)}
              />
            ))
          )}
        </div>

        {isAddRoom && (
          <div className="fixed inset-0 z-10 flex justify-center bg-black bg-opacity-40  w-full min-h-screen  transition-all duration-300">
            <div className="bg-white rounded-t-2xl z-20 h-fit fixed bottom-0 max-w-lg w-full mx-[27px] p-6 transition-all duration-300">
              <div className="flex justify-between items-center">
                <h1 className="text-brand-xl font-bold">Create New Room</h1>
                <div
                  className="cursor-pointer hover:bg-brand-gray-400 rounded-full p-2"
                  onClick={() => setIsAddRoom(false)}
                >
                  <Image
                    src="/assets/icons/close.svg"
                    alt="close icon"
                    width={28}
                    height={28}
                  />
                </div>
              </div>
              <div className="mt-5">
                <Formik
                  initialValues={{
                    room_name: "",
                  }}
                  validationSchema={Yup.object({
                    room_name: Yup.string()
                      .min(5)
                      .required("Room name is required"),
                  })}
                  onSubmit={({ room_name }) => console.log(room_name)}
                >
                  {({ errors }) => (
                    <Form>
                      <Input
                        label="Room Name"
                        type="text"
                        placeholder="Enter Room Name"
                        error={errors.room_name}
                      />
                      <button className="bg-brand-blue-500 w-full rounded-[10px] font-semibold text-brand-xl text-white py-3">
                        Create
                      </button>
                    </Form>
                  )}
                </Formik>
              </div>
            </div>
          </div>
        )}
      </div>
    </Layout>
  );
};

export default Index;
